[project]
name = "jaxsim"
dynamic = ["version"]
requires-python = ">= 3.10"
description = "A differentiable physics engine and multibody dynamics library for control and robot learning."
authors = [
    { name = "Diego Ferigo", email = "dgferigo@gmail.com" },
    { name = "Filippo Luca Ferretti", email = "filippoluca.ferretti@outlook.com" },
]
maintainers = [
    { name = "Filippo Luca Ferretti", email = "filippo.ferretti@iit.it" },
    { name = "Alessandro Croci", email = "alessandro.croci@iit.it" },
]
license.file = "LICENSE"
keywords = [
    "physics",
    "physics engine",
    "jax",
    "rigid body dynamics",
    "featherstone",
    "reinforcement learning",
    "robot",
    "robotics",
    "sdf",
    "urdf",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Robot Framework",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Games/Entertainment :: Simulation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development",
]
dependencies = [
    "coloredlogs",
    "jax >= 0.4.26",
    "jaxlib >= 0.4.26",
    "jaxlie >= 1.3.0",
    "jax_dataclasses >= 1.4.0",
    "pptree",
    "optax >= 0.2.3",
    "qpax",
    "rod >= 0.3.3",
    "typing_extensions ; python_version < '3.12'",
    "trimesh",
]

[project.optional-dependencies]
style = [
    "black[jupyter] ~= 24.0",
    "isort",
    "pre-commit",
]
testing = [
    "idyntree >= 12.2.1",
    "pytest >=6.0",
    "pytest-icdiff",
    "robot-descriptions"
]
viz = [
    "lxml",
    "mediapy",
    "mujoco >= 3.0.0",
    "scipy >= 1.14.0",
]
all = [
    "jaxsim[style,testing,viz]",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Changelog = "https://github.com/ami-iit/jaxsim/releases"
Documentation = "https://jaxsim.readthedocs.io"
Source = "https://github.com/ami-iit/jaxsim"
Tracker = "https://github.com/ami-iit/jaxsim/issues"

# ===========
# Build tools
# ===========

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=64",
    "setuptools-scm[toml]>=8",
    "wheel",
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools_scm]
local_scheme = "dirty-tag"
version_file = "src/jaxsim/_version.py"

# =================
# Style and testing
# =================

[tool.black]
line-length = 88

[tool.isort]
multi_line_output = 3
profile = "black"

[tool.pytest.ini_options]
addopts = "-rsxX -v --strict-markers"
minversion = "6.0"
testpaths = [
    "tests",
]

# ==================
# Ruff configuration
# ==================

[tool.ruff]
exclude = [
    ".git",
    ".pixi",
    ".pytest_cache",
    ".ruff_cache",
    ".idea",
    ".vscode",
    ".devcontainer",
    "__pycache__",
]
preview = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
    "B",
    "E",
    "F",
    "I",
    "W",
    "RUF",
    "UP",
    "YTT",
]

ignore = [
    "B008", # Function call in default argument
    "B024", # Abstract base class without abstract methods
    "E402", # Module level import not at top of file
    "E501", # Line too long
    "E731", # Do not assign a `lambda` expression, use a `def`
    "E741", # Ambiguous variable name
    "I001", # Import block is unsorted or unformatted
    "RUF003", # Ambiguous unicode character in comment
]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files
"**/{tests,docs,tools}/*" = ["E402"]
"**/{tests}/*" = ["B007"]
"__init__.py" = ["F401"]
"docs/conf.py" = ["F401"]

# ==================
# Pixi configuration
# ==================

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64"]

[tool.pixi.environments]
# We resolve only two groups: cpu and gpu.
# Then, multiple environments can be created from these groups.
default = { solve-group = "cpugroup" }
gpu = { features = ["gpu"], solve-group = "gpugroup" }
tasks-cpu = { features = ["test", "examples"], solve-group = "cpugroup" }
tasks-gpu = { features = ["test", "examples", "gpu"], solve-group = "gpugroup" }

# ---------------
# feature.default
# ---------------

# Dependencies from conda-forge.
[tool.pixi.dependencies]
#
# Matching `project.dependencies`.
#
coloredlogs = "*"
jax = "*"
jaxlib = "*"
jaxlie = "*"
jax-dataclasses = "*"
pptree = "*"
optax = "*"
qpax = "*"
rod = "*"
trimesh = "*"
typing_extensions = "*"
#
# Optional dependencies.
#
lxml = "*"
mediapy = "*"
mujoco = "*"
scipy = "*"
#
# Additional dependencies.
#
pip = "*"

# Dependencies from PyPI.
[tool.pixi.pypi-dependencies]
jaxsim = { path = "./", editable = true }

# ------------
# feature.test
# ------------

[tool.pixi.feature.test.tasks]
pipcheck = "pip check"
tests = { cmd = "pytest", depends_on = ["pipcheck"] }

[tool.pixi.feature.test.dependencies]
black = "24.*"
idyntree = "*"
isort = "*"
pre-commit = "*"
pytest = "*"
pytest-icdiff = "*"
robot_descriptions = "*"

# ----------------
# feature.examples
# ----------------

[tool.pixi.feature.examples.tasks]
examples = { cmd = "jupyter notebook ./examples" }

[tool.pixi.feature.examples.dependencies]
notebook = "*"
robot_descriptions = "*"

# -----------
# feature.gpu
# -----------

[tool.pixi.feature.gpu]
platforms = ["linux-64"]
system-requirements = { cuda = "12" }

[tool.pixi.feature.gpu.dependencies]
cuda-version = "12.*"
# Pinning a specific version awaiting the following to get addressed:
# https://github.com/conda-forge/jaxlib-feedstock/issues/285
jaxlib = { version = "<0.4.31", build = "*cuda*" }
